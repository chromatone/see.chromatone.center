{"version":3,"file":"index.umd.js","sources":["../src/index.js"],"sourcesContent":["const SYMBOL_LIST = ['', 'K', 'M', 'B'];\nconst OPTIONS = {\n  digits: 1,\n  uppercase: true\n};\n\n/**\n * Convert number into human numbers\n *\n * @param {Number} number\n * @param {Object} options\n */\nconst toAbr = (number, options = {}) => {\n  if (isNaN(number)) {\n    return 0;\n  }\n\n  const absNumber = Math.abs(number);\n\n  if (absNumber < 1000) {\n    return Number(number);\n  }\n\n  const { digits, uppercase } = { ...OPTIONS, ...options };\n  const sign = [0, 1].includes(Math.sign(number)) ? 1 : -1;\n\n  let abr = 0;\n  let symbol = '';\n\n  for (let i = 0; i <= SYMBOL_LIST.length; i++) {\n    const reference = 1000 ** i;\n\n    if (absNumber >= reference) {\n      abr = absNumber / reference;\n      symbol = uppercase ? SYMBOL_LIST[i] : SYMBOL_LIST[i].toLowerCase();\n    }\n  }\n\n  const relevantDecimal = abr - Math.floor(abr);\n\n  const res =\n    relevantDecimal <= 0 || digits === 0\n      ? Math.floor(abr * sign)\n      : parseFloat(abr * sign).toFixed(digits);\n\n  return `${res}${symbol}`;\n};\n\nexport default toAbr;\n"],"names":["SYMBOL_LIST","OPTIONS","digits","uppercase","number","options","isNaN","absNumber","Math","abs","Number","sign","includes","abr","symbol","i","length","reference","toLowerCase","floor","parseFloat","toFixed"],"mappings":"mbAAA,IAAMA,EAAc,CAAC,GAAI,IAAK,IAAK,KAC7BC,EAAU,CACdC,OAAQ,EACRC,WAAW,UASC,SAACC,EAAQC,GACrB,YADqBA,IAAAA,EAAU,IAC3BC,MAAMF,GACR,SAGF,IAAMG,EAAYC,KAAKC,IAAIL,GAE3B,GAAIG,EAAY,IACd,OAAOG,OAAON,GAShB,IANA,WAAmCH,EAAYI,GAAvCH,IAAAA,OAAQC,IAAAA,UACVQ,EAAO,CAAC,EAAG,GAAGC,SAASJ,KAAKG,KAAKP,IAAW,GAAK,EAEnDS,EAAM,EACNC,EAAS,GAEJC,EAAI,EAAGA,GAAKf,EAAYgB,OAAQD,IAAK,CAC5C,IAAME,WAAY,IAAQF,GAEtBR,GAAaU,IACfJ,EAAMN,EAAYU,EAClBH,EAASX,EAAYH,EAAYe,GAAKf,EAAYe,GAAGG,eAWzD,UAPwBL,EAAML,KAAKW,MAAMN,IAGpB,GAAgB,IAAXX,EACpBM,KAAKW,MAAMN,EAAMF,GACjBS,WAAWP,EAAMF,GAAMU,QAAQnB,IAErBY"}