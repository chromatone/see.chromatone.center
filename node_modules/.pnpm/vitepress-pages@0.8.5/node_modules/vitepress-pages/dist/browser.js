var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/browser.js
var browser_exports = {};
__export(browser_exports, {
  getPage: () => getPage,
  getPages: () => getPages,
  getParents: () => getParents,
  getSiblings: () => getSiblings,
  normalize: () => normalize,
  pages: () => pages
});
module.exports = __toCommonJS(browser_exports);
function normalize(url) {
  return url += url.endsWith("/") ? "" : "/";
}
var pages;
function getPages(routes) {
  if (pages)
    return pages;
  pages = {};
  for (let route of routes) {
    if (route.path == "/")
      continue;
    const split = route.path.split("/").slice(0, -2).join("/");
    const folder = normalize(split);
    pages[folder] = pages[folder] || [];
    pages[folder].push(route);
  }
  for (let folder in pages) {
    pages[folder].sort((a, b) => {
      if ((a == null ? void 0 : a.date) && (b == null ? void 0 : b.date)) {
        return a.date > b.date ? -1 : 1;
      } else {
        return 0;
      }
    });
  }
  return pages;
}
function getPage(path, routes) {
  return routes.find((p) => normalize(p.path) == path);
}
function getSiblings(path, routes) {
  let prev, next, index, total;
  const folder = normalize(path.split("/").slice(0, -2).join("/"));
  const pages2 = getPages(routes);
  const list = pages2[folder];
  if (list) {
    total = list.length;
    index = list.findIndex((page) => normalize(page.path) == path);
    if (index >= 0 && index <= list.length) {
      next = list[index + 1];
    }
    if (index > 0) {
      prev = list[index - 1];
    }
  }
  return { prev, next, index, total };
}
function getParents(path, routes) {
  const parents = [];
  const url = path.split("/").filter(Boolean);
  for (let i in url) {
    const link = "/" + url.slice(0, -i).join("/") + "/";
    parents.push(routes.find((r) => {
      return r.path == link;
    }));
  }
  return parents.filter(Boolean).reverse();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getPage,
  getPages,
  getParents,
  getSiblings,
  normalize,
  pages
});
