var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/browser.js
function normalize(url) {
  return url += url.endsWith("/") ? "" : "/";
}
var pages;
function getPages(routes) {
  if (pages)
    return pages;
  pages = {};
  for (let route of routes) {
    if (route.path == "/")
      continue;
    const split = route.path.split("/").slice(0, -2).join("/");
    const folder = normalize(split);
    pages[folder] = pages[folder] || [];
    pages[folder].push(route);
  }
  for (let folder in pages) {
    pages[folder].sort((a, b) => {
      if ((a == null ? void 0 : a.date) && (b == null ? void 0 : b.date)) {
        return a.date > b.date ? -1 : 1;
      } else {
        return 0;
      }
    });
  }
  return pages;
}
function getPage(path, routes) {
  return routes.find((p) => normalize(p.path) == path);
}
function getSiblings(path, routes) {
  let prev, next, index, total;
  const folder = normalize(path.split("/").slice(0, -2).join("/"));
  const pages2 = getPages(routes);
  const list = pages2[folder];
  if (list) {
    total = list.length;
    index = list.findIndex((page) => normalize(page.path) == path);
    if (index >= 0 && index <= list.length) {
      next = list[index + 1];
    }
    if (index > 0) {
      prev = list[index - 1];
    }
  }
  return { prev, next, index, total };
}
function getParents(path, routes) {
  const parents = [];
  const url = path.split("/").filter(Boolean);
  for (let i in url) {
    const link = "/" + url.slice(0, -i).join("/") + "/";
    parents.push(routes.find((r) => {
      return r.path == link;
    }));
  }
  return parents.filter(Boolean).reverse();
}

export {
  __spreadValues,
  __spreadProps,
  normalize,
  pages,
  getPages,
  getPage,
  getSiblings,
  getParents
};
