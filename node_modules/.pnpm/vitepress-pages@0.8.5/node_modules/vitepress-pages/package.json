{
  "name": "vitepress-pages",
  "version": "0.8.5",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/davay42/vitepress-pages.git"
  },
  "bugs": {
    "url": "https://github.com/davay42/vitepress-pages/issues"
  },
  "author": "davay42 <davay@defucc.me>",
  "funding": {
    "type": "ko-fi",
    "url": "https://ko-fi.com/davay"
  },
  "keywords": [
    "vite",
    "vitepress",
    "plugin",
    "markdown",
    "pages",
    "digital garden"
  ],
  "main": "./dist/index.js",
  "exports": {
    ".": {
      "import": "./dist/index.mjs",
      "require": "./dist/index.js"
    },
    "./browser": {
      "import": "./dist/browser.mjs",
      "require": "./dist/browser.js"
    }
  },
  "dependencies": {
    "gray-matter": "^4.0.3",
    "sharp": "^0.30.3"
  },
  "devDependencies": {
    "tsup": "^5.12.1",
    "vite": "^2.8.6",
    "vitepress": "0.22.2",
    "vite-plugin-pages": "^0.22.0",
    "vite-plugin-pages-sitemap": "^1.1.11"
  },
  "peerDependencies": {
    "vite-plugin-pages": "^0.22.0"
  },
  "scripts": {
    "dev": "vitepress dev",
    "build": "vitepress build",
    "lib": "tsup src/index.js src/browser.js --format esm,cjs"
  },
  "readme": "### File system based routing for [`vitepress`](https://vitepress.vuejs.org/) digital gardening\n\n[`vitepress-pages`](https://www.npmjs.com/package/vitepress-pages) is a [`vite-plugin-pages`](https://github.com/hannoeru/vite-plugin-pages) extension for automatic routes generation out of any `markdown` data collection.\n\n## What does it do?\n\n### In Node\n\n- Scans your project folder structure\n- Traverses all `index.md` files\n- Parses frontmatter\n- Optimizes media files\n- Creates client-side interface for us to use in our\n\n### In browser\n\n- Gives you access to the routes array\n- Recreates hierarchical folder tree structure for navigation and search\n- Generates parents list for any given page\n- Finds previous and next siblings along with the index of current page in the list and the total number of pages in it\n\nTech used:\n\n- [graymatter](https://github.com/jonschlinkert/gray-matter) for parsing markdown files. We copy all the frontmatter, generate excerpt and have a flag for empty content. We don't load all the file contents in order to keep the list light enough even for quite big sites.\n\n  You can force load contents with a flag `type: block` put into your `index.md` frontmatter\n\n- [sharp](https://github.com/lovell/sharp) for image resizing.\n\n## Installation\n\n```bash\nnpm i -D vite-plugin-pages vite-plugin-pages-sitemap\nnpm i vitepress-pages\n```\n\n## Configuration\n\n`vite.config.js`\n\n```js\nimport { defineConfig } from \"vite\";\nimport Pages from \"vite-plugin-pages\";\nimport { extendRoutes } from \"vitepress-pages\";\nimport generateSitemap from \"vite-plugin-pages-sitemap\"; //optional;\n\nexport default defineConfig({\n  plugins: [\n    Pages({\n      dirs: [{ dir: \".\", baseRoute: \".\" }],\n      extensions: [\"md\"],\n      ...extendRoutes(),\n      onRoutesGenerated: (routes) =>\n        generateSitemap({ routes, hostname: \"http://localhost/\" }), //provide a hostname and generate a `sitemap.xml` in the public folder\n    }),\n  ],\n});\n```\n\n## Options\n\nYou can customize the `extendRoutes` call with these options:\n\n```js\n{\n...extendRoutes({ //these are default options\n        graymatter: { // graymatter options\n          excerpt: true,\n          excerpt_separator: \"<!-- excerpt -->\",\n        },\n        mediaFolder: \"media_files\", // the name of a folder inside your /public/ to put all the optimized images to\n        mediaTypes: { // what frontmatter fields should be considered as images and how should sharp deal with them\n          icon: { width: 300, height: 300, fit: \"inside\" },\n          cover: { size: 1200, height: 800, fit: \"inside\" },\n        },\n      })\n}\n```\n\n## Usage\n\nYou can import the list of all routes from `~pages` anywhere in the app. We provide basic of functions at `vitepress-pages/browser` to navigate them easily.\n\n`composables/pages.js`\n\n```js\nimport routes from \"~pages\"; // all routes list from `vite-plugin-pages`\nimport {\n  getPage,\n  getPages,\n  getParents,\n  getSiblings,\n} from \"vitepress-pages/browser\";\n\nconst pages = getPages(routes); // hierarchical structure of the pages\n\nconst usePage = (path) => getPage(path, routes); // current page data object\nconst useParents = (path) => getParents(path, routes); // An array of parent routes starting from the root\nconst useSiblings = (path) => getSiblings(path, routes); // { prev, next, index, total }\n\nexport { routes, pages, usePage, useParents, useSiblings };\n```\n\n## Display\n\nThe last step is to create some [Vue 3](https://vuejs.org) components to display all the data. You can import any of the functions and use them with current (or another) route path.\n\n`<script setup>`\n\n```js\nimport {\n  pages,\n  usePage,\n  useSiblings,\n  useParents,\n} from \"@theme/composables/pages\";\n\nimport { useRoute } from \"vitepress\";\nconst route = useRoute();\n\nconst page = computed(() => usePage(route.paths));\nconst siblings = computed(() => useSiblings(route.path));\nconst parents = computed(() => useParents(route.path));\nconst children = computed(() => pages[route.path]);\n```\n\n`<template>`\n\nBe creative!\n\n```html\n<section v-for=\"page in pages\" :key=\"page\">\n  <img :src=\"page.cover\" />\n  <h2>{{ page.title }}</h2>\n  <p>{{ page.subtitle }}</p>\n  <h3 v-for=\"child in pages[page.path]\" :key=\"child\">{{ child.title }}</h3>\n</section>\n```\n"
}